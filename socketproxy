#!/usr/bin/env python
'''
Sit on a socket connection between a client and a server tracing the
the contents of the packets they contain. For example, if we are running
an HTTP server on port 8000 on the local host and we type
 
$ socketproxy --port 5000 localhost:8000

we can then connect to port 5000 from another terminal window and perform 
a GET like this:

$ telnet localhost 5000
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
GET /
(HTTP response here)
Connection closed by foreign host
$ 

and the socketproxy terminal will display the traffic that was exchanged.

If we capture the packet exchange like this:

$ socketproxy --port 5000 localhost:8000 --record packets.cap

We can then replay the exchange taking the part of one of the participants.
To replay the client's packets to a live server:

$ socketproxy --asclient=packets.cap localhost:8080

To replay the server's responses to a live client:

$ socketproxy --asserver=packets.cap --port=5000 dummy

'''

import argparse
import atexit
import datetime
import re
import select
import socket
import string
import sys
import time

# File to capture packets if not none
capture = None

# Last time a packet was captured, if any
lasttime = None

# Line number of last line we read from the capture file, if any
linenumber = 0

def render(ch):
    '''Cleanup unprintable ascii characters for tracing'''
    return ch if ch in string.printable and ch >= ' ' else '.'

def reset():
    '''
    Reset to default colour. We register this with the atexit handler so 
    we always do this however we exit.
    '''
    print '\033[0m'

def dump_string(width, data, display):
        
    # Convert to hex digits and pad with spaces to a full line
    hex = ''.join('%02x ' % ord(ch) for ch in data) + '   '*(width-1)

    # Convert to printables and pad with spaces to a full line
    ascii = ''.join(render(ch) for ch in data) + ' '*(width-1)

    line_count = len(ascii) / width
    result = []
    for line in range(line_count):

        # Locate the part of our packet to which this line corresponds
        first = line * width
        past = first + width

        # Build the display line based on our optiions
        text = '%04x:' % (line*width)
        if display in ('hex', 'all')  : text += ' ' + hex[first*3:past*3]
        if display in ('ascii', 'all'): text += ' |' + ascii[first:past] + '|'

        result.append(text)

    return result

def trace(width, colour, display, data):
    '''
    Given a string of binary data representing a single packet, display 
    it on standard output (width character wide) in the named colour.

    The packet is broken into lines of sixteen bytes displayed first in
    hexadecimal and then again in ascii. Each line is prefixed with the
    offset of the first byte of the line from the start of the packet in
    hexadecimal.

    The width and printing of hex and ascii components is configurable
    depending on display ('ascii', 'hex', 'all') and width.
    '''

    # Map the colour name into an escape sequence
    n = {
        'black': '30', 'red'    : '31', 'green' : '32', 'yellow' : '33', 
        'blue' : '34', 'magenta': '35', 'cyan'  : '36', 'white'  : '37',
    }.get(colour.lower(), '0')

    lines = dump_string(width, data, display)
    leader = '\033['+n+'m' 
    for line in lines:
        print leader + line
        leader = ''
     
    # Reset to default colour
    reset()

def record_packet(type, data):

    global lasttime

    # Quickly escape if we're not recording
    if not capture: return

    # If this is the first record, set the timestamp otherwise calculate
    # the interval since the last record 
    now = datetime.datetime.now()
    if lasttime:
        delta = now - lasttime
    else:
        delta = now - now
    lasttime = now

    # Write the first record as C/S followed by the delta and then the length
    print >>capture, type, int(delta.total_seconds()*1000), len(data)

    # Now write out the packet
    lines = dump_string(16, data, 'all')
    for line in lines:
        print >>capture, line

def compare_packets(expected, actual):
    result = ''
    if len(expected) != len(actual):
        return 'expected %d byte packet but received %d bytes' % (len(expected), len(actual))

    for i in range(len(expected)):
        if expected[i] != actual[i]:
            diff = 'byte %d expected 0x%02x(%c) but received 0x%02x(%c)\n' % (
                i,
                ord(expected[i]), render(expected[i]),
                ord(actual[i]),   render(actual[i])
            )
            result += diff   

    return None if result == '' else result

def process_packet(args, sender, packet):

    # An empty packet indicates that the client has closed our 
    # connection
    if packet == '':
        print sender['name'], 'closed connection'
        return False

    # Display the client's packet to the server
    trace(args.width, args.clientcolour if sender['name'] == 'client' else args.servercolour, args.display, packet)

    # Record the packet if we are capturing
    record_packet(sender['type'], packet)

    # Update the client statistics
    sender['bytes'] += len(packet)
    sender['packets'] += 1
    if len(packet) > sender['max']: sender['max'] = len(packet)

    # Socket is still connected
    return True

def proxy_packets(args):

    # Extract the host name and port (as text). If we're only given one 
    # element, assume its the port number and that the host is localhost
    pa = args.server.split(':')
    if len(pa) == 1: pa = ('localhost', pa[0])

    # The socket that the client will use to talk to the host via us rather 
    # than directly. Set the SO_REUSEADDR option so we can rerun without 
    # the socket appearing to be still in use.
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    client_socket.bind(('localhost', args.port))
    client_socket.listen(1)
    print 'listening on', args.port
    client_connection, client_address = client_socket.accept()
    print 'accepted', client_address

    # connect to the real server
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.connect((pa[0], int(pa[1])))
    print 'connected to server %s.%s' % (pa[0], pa[1])

    # Keep track of some statistics of marginal interest
    client = {'name': 'client', 'type': 'C', 'bytes': 0, 'packets': 0, 'max': 0}
    server = {'name': 'server', 'type': 'S', 'bytes': 0, 'packets': 0, 'max': 0}

    # Now we're about to trace packets, make sure we reset the terminal colours
    # if we are broken into
    atexit.register(reset)

    connected = True
    while connected:

        # Get the next packet from the server or the client or possibly 
        # both.
        sockets = (client_connection, server_socket)
        readables, writables, errors = select.select(sockets, sockets, sockets)

        for readable in readables:
            data = readable.recv(4096)
            if readable is client_connection:

                connected = process_packet(args, client, data)
                if connected:
                    server_socket.send(data)

            elif readable is server_socket:

                connected = process_packet(args, server, data)
                if connected:
                    client_connection.send(data)

            else:
                print 'packet received from an unknown socket'

    # All done. Tidy up and report the statistics we gathered
    client_connection.close()
    server_socket.close()
    if capture: capture.close()

    for participant in (server, client):
        print participant['name'], 'sent',
        print participant['bytes'], 'bytes',
        print 'in', participant['packets'], 'packets.',
        print 'Largest packet was', participant['max'], 'bytes'

def readrecord(capture):
    global linenumber
    
    def nextline():
        global linenumber
        while True:            
            line = capture.readline()
            linenumber += 1
            if line == '': return line
            line = line.strip()
            if line != '' and line[0] != '#': 
                return line

    def parse_v(line):
        
        # format is V maj.min timestamp
        match = re.match(r'V\s+(\d+)\.(\d+)\s+.*', line)
        if not match:
            return {'type': 'E', 'error': 'V record not recognised:\n' + line}
        else:
            return {'type': 'V', 'major': int(match.group(1)), 'minor': int(match.group(2))}

    def parse_t(line):
        # Format is T restofline
        return {'type': 'T', 'text': line[1:]}

    def parse_cs(line):
        # Format is C ms length
        type = line[0]
        assert type in 'cCsS'
        match = re.match(r'\s+(\d+)\s+(\d+)\s*', line[1:])
        if not match:
            return {'type': 'E', 'error': type + ' record not recognised:\n' + line}
        else:
            result = {'type': type, 'delay': int(match.group(1)), 'length': int(match.group(2)), 'data': ''}

            # Now we need to read lines of bytes
            readsofar = 0
            while readsofar < result['length'] > 0:
                record = nextline()
                match = re.match(r'([0-9a-f]+):([0-9a-f \t]+)\s+(\|[^|]+\|)', record)
                if not match:
                    return {'type': 'E', 'error': 'bad packet data in record "' + line + '":\n' + record}

                offset = int(match.group(1), 16)
                if offset != readsofar:
                    return {'type': 'E', 'error': 'bad offset %d (expecting %d) in record "%s":\n%s' % (offset, readsofar, line, record)}
                bytes = [int(hex, 16) for hex in match.group(2).strip().split()]
                readsofar += len(bytes)
                result['data'] += ''.join([chr(byte) for byte in bytes])

            return result


                

            

    line = nextline()
    recordstart = linenumber
    if line == '':
        return recordstart, None
    elif line[0] in 'Vv':
        return recordstart, parse_v(line)
    elif line[0] in 'CcSs':
        return recordstart, parse_cs(line)
    elif line[0] in 'Tt':
        return recordstart, parse_t(line)
    else:
        return recordstart, {'type': 'E', 'error': line}

def replay(capture_file, live_socket, captured, live):
    '''
    Given the name of a capture file, an open socket to the real participant
    in this exchange and the record types for the captured end and the live
    end, replay the contents of the capture file. Packets from the captured
    end in the capture file are transmitted to the live participant. Packets
    from the live participant are checked against their versions in the 
    capture file.
    '''

    with open(capture_file, 'r') as capture:
        while True:

            # Parse the next record from the capture file. When we hit the
            # end of the file, None will be returned.
            lineno, record = readrecord(capture)
            if not record: return

            if record['type'] == 'V':

                # Check the version of the capture file is acceptable
                if record['major'] > 1:
                    print >>sys.stderr, 'error:%d file specifies version %d.%d, expecting 1.x' % (lineno, record['major'], record['minor'])
                    return

            elif record['type'] == 'E':

                # We failed to parse a capture file entry. Display the 
                # error and quit.
                print >>sys.stderr, 'error:%d' % lineno, record['error']
                return
            
            elif record['type'] == 'T':

                # Display the message in the capture file
                print record['text']

            elif record['type'] == captured:

                # Send the captured packet to the live participant after
                # waiting for the delay recorded in the capture file
                time.sleep(record['delay']/1000.0)
                live_socket.send(record['data'])

            elif record['type'] == live:

                # Wait for the delay recorded in the capture file and then
                # attempt to receive a packet from the live participant. 
                # When we receive such a packet, check they match. Any 
                # mismatch is treated as a warning only.
                time.sleep(record['delay']/1000.0)
                actual_response = live_socket.recv(record['length'])
                comparison = compare_packets(record['data'], actual_response)
                if comparison:
                    print 'warning:%d live response not as expected:' % lineno
                    print comparison


def replay_as_client(args):
    '''
    In this mode, we replay the packet trace captured in the file provided
    playing the role of the client (sending packets to the real live server
    and checking the responses we receive match the server packets in the
    capture file).
    '''

    # We are acting as the client so we need to connect to the server 
    # specified on the command line. Extract the host name and port (as 
    # text). If we're only given one element, assume its the port number
    # and that the host is localhost
    pa = args.server.split(':')
    if len(pa) == 1: pa = ('localhost', pa[0])
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.connect((pa[0], int(pa[1])))
    print 'connected to server %s.%s' % (pa[0], pa[1])
    
    # Now replay
    print 'replaying', args.asclient
    replay(args.asclient, live_socket=server_socket, captured='C', live='S')

    return


def replay_as_server(args):
    '''
    In this mode, we replay the packet trace captured in the file provided
    playing the role of the server (recieving packers from the real live
    client, checking they match the client packets we captured and replying
    with the server packets from the capture file).
    '''

    # We are acting as the server so we need to bind a socket to the port
    # requested and wait for our client to connect. Set the SO_REUSEADDR 
    # option so we can rerun without the socket appearing to be still in 
    # use.
    bind_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    bind_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    bind_socket.bind(('localhost', args.port))
    bind_socket.listen(1)
    print 'listening on', args.port
    client_socket, client_address = bind_socket.accept()
    print 'accepted', client_address
    
    # Now we can reply the packets
    print 'replaying', args.asserver
    replay(args.asserver, live_socket=client_socket, captured='S', live='C')


            


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='Trace socket traffic between client and server')
    parser.add_argument("-w", "--width", type=int, default=16, metavar='N', help="number of bytes to display per line (default 16)")
    parser.add_argument("-t", "--trace", action="store_true", help="trace packets exchanged")
    parser.add_argument("-p", "--port", type=int, default=5000, metavar='N', help="port number client is to use (default 5000)")
    parser.add_argument("-c", "--clientcolour", default="green", metavar='NAME', help="colour to use to render client packets (default green)")
    parser.add_argument("-s", "--servercolour", default="yellow", metavar='NAME', help="colour to use to render server packets (default yellow)")
    parser.add_argument("-d", "--display", choices=['ascii', 'hex', 'all'], default='all', help="display packet in hexadecimal and/or ascii")
    parser.add_argument("-r", "--record", help="record captured packets for replay")
    parser.add_argument("-a", "--asclient", help="replay captured packets from file as if client ")
    parser.add_argument("-b", "--asserver", help="replay captured packets from file as if server")
    parser.add_argument("server", help="port address of server (for example, localhost:80)")
    args = parser.parse_args()

    if args.asserver and args.asclient:
        print >>sys.stderr, 'error: cannot specify both --asclient and --asserver'
        sys.exit(1)

    # Find out if we have to capture the packets we see and if so, make sure
    # the file can be opened by writing a V record.
    if args.record:
        capture = open(args.record, "w")
        print >>capture, "V 1.0", datetime.datetime.now().strftime("%A %d-%b-%Y %H:%M:%S")

    # Which mode?
    if args.asclient:
        replay_as_client(args)
    elif args.asserver:
        replay_as_server(args)
    else:
        proxy_packets(args)


 

